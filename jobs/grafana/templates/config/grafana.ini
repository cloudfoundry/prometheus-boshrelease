##################### Grafana Configuration Example #####################
#
# Everything has defaults so you only need to uncomment things you want to
# change

<% if_p('grafana.app_mode') do |app_mode| %>
# possible values : production, development
app_mode = <%= app_mode %>
<% end %>

<% if_p('grafana.instance_name') do |instance_name| %>
# instance name, defaults to HOSTNAME environment variable value or hostname if HOSTNAME var is empty
instance_name = <%= instance_name %>
<% end %>

<% if_p('grafana.force_migration') do |force_migration| %>
# force migration will run migrations that might cause dataloss
force_migration = <%= force_migration %>
<% end %>

#################################### Paths ####################################
[paths]
# Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)
data = /var/vcap/store/grafana

<% if_p('grafana.paths.temp_data_lifetime') do |temp_data_lifetime| %>
# Temporary files in `data` directory older than given duration will be removed
temp_data_lifetime = <%= temp_data_lifetime %>
<% end %>

# Directory where grafana can store logs
logs = /var/vcap/sys/log/grafana

# Directory where grafana will automatically scan and look for plugins
plugins = /var/vcap/store/grafana/plugins

# folder that contains provisioning config files that grafana will apply on startup and while running.
provisioning = /var/vcap/jobs/grafana/config/provisioning

#################################### Server ####################################
[server]
<% if_p('grafana.server.protocol') do |protocol| %>
# Protocol (http, https, h2, socket)
protocol = <%= protocol %>
<% end %>

<% if_p('grafana.server.http_addr') do |http_addr| %>
# The ip address to bind to, empty will bind to all interfaces
http_addr = <%= http_addr %>
<% end %>

# The http port to use
http_port = <%= p('grafana.server.http_port') %>

<% if_p('grafana.server.domain') do |domain| %>
# The public facing domain name used to access grafana from a browser
domain = <%= domain %>
<% end %>

<% if_p('grafana.server.enforce_domain') do |enforce_domain| %>
# Redirect to correct domain if host header does not match domain
# Prevents DNS rebinding attacks
enforce_domain = <%= enforce_domain %>
<% end %>

<% if_p('grafana.server.root_url') do |root_url| %>
# The full public facing url
root_url = <%= root_url %>
<% end %>

<% if_p('grafana.server.serve_from_sub_path') do |serve_from_sub_path| %>
# Serve Grafana from subpath specified in `root_url` setting. By default it is set to `false` for compatibility reasons.
serve_from_sub_path = <%= serve_from_sub_path %>
<% end %>

<% if_p('grafana.server.router_logging') do |router_logging| %>
# Log web requests
router_logging = <%= router_logging %>
<% end %>

<% if_p('grafana.server.static_root_path') do |static_root_path| %>
# the path relative working path
static_root_path = <%= static_root_path %>
<% end %>

<% if_p('grafana.server.enable_gzip') do |enable_gzip| %>
# enable gzip
enable_gzip = <%= enable_gzip %>
<% end %>

<% if_p('grafana.server.ssl_cert', 'grafana.server.ssl_key') do %>
# https certs & key file
cert_file = /var/vcap/jobs/grafana/config/ssl_cert.pem
cert_key = /var/vcap/jobs/grafana/config/ssl_key.pem
<% end %>

<% if_p('grafana.server.socket_gid') do |socket_gid| %>
# Unix socket gid
# Changing the gid of a file without privileges requires that the target group is in the group of the process and that the process is the file owner
# It is recommended to set the gid as http server user gid
# Not set when the value is -1
socket_gid = <%= socket_gid %>
<% end %>

<% if_p('grafana.server.socket_mode') do |socket_mode| %>
# Unix socket mode
socket_mode = <%= socket_mode %>
<% end %>

# Unix socket path
socket = /var/vcap/sys/run/grafana/grafana.sock

<% if_p('grafana.server.cdn_url') do |cdn_url| %>
# CDN Url
cdn_url = <%= cdn_url %>
<% end %>

<% if_p('grafana.server.read_timeout') do |read_timeout| %>
# Sets the maximum time in minutes before timing out read of an incoming request and closing idle connections.
# `0` means there is no timeout for reading the request.
read_timeout = <%= read_timeout %>
<% end %>

# This setting enables you to specify additional headers that the server adds to HTTP(S) responses.
[server.custom_response_headers]
#exampleHeader1 = exampleValue1
#exampleHeader2 = exampleValue2
<% p('grafana.server.custom_response_headers', {}).each do |key,value| %>
<%= key %> = <%= value %>
<% end %>

#################################### GRPC Server #########################
[grpc_server]
<% if_p('grafana.grpc_server.network') do |network| %>
network = <%= network %>
<% end %>

<% if_p('grafana.grpc_server.address') do |address| %>
address = <%= address %>
<% end %>

<% if_p('grafana.grpc_server.use_tls') do |use_tls| %>
use_tls = <%= use_tls %>
<% end %>

<% if_p('grafana.grpc_server.cert_file', 'grafana.grpc_server.cert_key') do %>
# certs & key file
cert_file = /var/vcap/jobs/grafana/config/grpc_server_cert.pem
cert_key = /var/vcap/jobs/grafana/config/grpc_server_key.pem
<% end %>

#################################### Database ####################################
[database]
# Either "mysql", "postgres" or "sqlite3", it's your choice
type = <%= p('grafana.database.type') %>

<% if p('grafana.database.type') == "sqlite3" %>
# For "sqlite3" only, path relative to data_path setting
path = /var/vcap/store/grafana/grafana.db

<% if_p('grafana.database.cache_mode') do |cache_mode| %>
# For "sqlite3" only. cache mode setting used for connecting to the database
cache_mode = <%= cache_mode %>
<% end %>
<% if_p('grafana.database.wal') do |wal| %>
# Enable/disable Write-Ahead Logging, https://sqlite.org/wal.html. WAL has benefits when sqlite3 struggles with locks.
wal = <%= wal %>
<% end %>
<% elsif p('grafana.database.type') == "mysql" || p('grafana.database.type') == "postgres" %>
<%
  database_host = nil
  if_p('grafana.database.host') do |host|
    database_host = host
  end.else do
    database_host = link('database').instances.first.address
  end
%>
# Only applicable to MySQL or Postgres. Includes IP or hostname and port.
host = <%= "#{database_host}:#{p('grafana.database.port')}" %>

# The name of the Grafana database
name = <%= p('grafana.database.name') %>

# The database user
user = <%= p('grafana.database.user') %>

# The database userâ€™s password
password = <%= p('grafana.database.password') %>

<% if_p('grafana.database.max_idle_conn') do |max_idle_conn| %>
# The maximum number of connections in the idle connection pool.
max_idle_conn = <%= max_idle_conn %>
<% end %>

<% if_p('grafana.database.max_open_conn') do |max_open_conn| %>
# The maximum number of open connections to the database.
max_open_conn = <%= max_open_conn %>
<% end %>

<% if_p('grafana.database.conn_max_lifetime') do |conn_max_lifetime| %>
# Connection Max Lifetime default is 14400 (means 14400 seconds or 4 hours)
conn_max_lifetime = <%= conn_max_lifetime %>
<% end %>

<% if_p('grafana.database.ssl_mode') do |ssl_mode| %>
# For Postgres, use either disable, require or verify-full. For MySQL, use either true, false, or skip-verify
ssl_mode = <%= ssl_mode %>
<% end %>

<% if_p('grafana.database.tls_client_cert', 'grafana.database.tls_client_key') do %>
# The path to the client cert. Only if server requires client authentication.
client_cert_path = /var/vcap/jobs/grafana/config/database_tls_client_cert.pem

# The path to the client key. Only if server requires client authentication.
client_key_path = /var/vcap/jobs/grafana/config/database_tls_client_key.pem

<% if_p('grafana.database.tls_client_ca') do %>
# The path to the CA certificate to use
ca_cert_path = /var/vcap/jobs/grafana/config/database_tls_client_ca.pem
<% end %>

<% if_p('grafana.database.server_cert_name') do |server_cert_name| %>
# (MySQL only) The common name field of the certificate used by the mysql server. Not necessary if ssl_mode is set to skip-verify.
server_cert_name = <%= server_cert_name %>
<% end %>
<% end %>
<% else raise "Database type #{p('grafana.database.type')} not supported" %>
<% end %>

# Set to true to log the sql calls and execution times.
<% if_p('grafana.database.log_queries') do |log_queries| %>
log_queries = <%= log_queries %>
<% end %>

#################################### Cache server #############################
[remote_cache]
# Either "redis", "memcached" or "database" default is "database"
type = <%= p('grafana.remote_cache.type') %>

# cache connectionstring options
<% if p('grafana.remote_cache.type') == "database" %>
# database: will use Grafana primary database.
<% elsif p('grafana.remote_cache.type') == "redis" || p('grafana.remote_cache.type') == "memcached" %>
# redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=grafana`
# memcache: 127.0.0.1:11211
connstr = <%= p('grafana.remote_cache.connstr') %>
<% else raise "Remote cache type #{p('grafana.remote_cache.type')} not supported" %>
<% end %>

<% if_p('grafana.remote_cache.prefix') do |prefix| %>
# prefix prepended to all the keys in the remote cache
prefix = <%= prefix %>
<% end %>

<% if_p('grafana.remote_cache.encryption') do |encryption| %>
# This enables encryption of values stored in the remote cache
encryption = <%= encryption %>
<% end %>

<% if_p('grafana.remote_cache.user_agent') do |user_agent| %>
# Sets a custom value for the `User-Agent` header for outgoing data proxy requests. If empty, the default value is `Grafana/<BuildVersion>` (for example `Grafana/9.0.0`).
user_agent = <%= encryption %>
<% end %>

#################################### Analytics ####################################

[analytics]
<% if_p('grafana.analytics.enabled') do |enabled| %>
# Enable the analytics feature
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.analytics.reporting_enabled') do |reporting_enabled| %>
# Server reporting, sends usage counters to stats.grafana.org every 24 hours.
# No ip addresses are being tracked, only simple counters to track
# running instances, dashboard and error counts. It is very helpful to us.
# Change this option to false to disable reporting.
reporting_enabled = <%= reporting_enabled %>
<% end %>

<% if_p('grafana.analytics.reporting_distributor') do |reporting_distributor| %>
# The name of the distributor of the Grafana instance. Ex hosted-grafana, grafana-labs
reporting_distributor = <%= reporting_distributor %>
<% end %>

<% if_p('grafana.analytics.check_for_updates') do |check_for_updates| %>
# Set to false to disable all checks to https://grafana.com
# for new versions of grafana. The check is used
# in some UI views to notify that a grafana update exists.
# This option does not cause any auto updates, nor send any information
# only a GET request to https://raw.githubusercontent.com/grafana/grafana/main/latest.json to get the latest version.
check_for_updates = <%= check_for_updates %>
<% end %>

<% if_p('grafana.analytics.check_for_plugin_updates') do |check_for_plugin_updates| %>
# Set to false to disable all checks to https://grafana.com
# for new versions of plugins. The check is used
# in some UI views to notify that a plugin update exists.
# This option does not cause any auto updates, nor send any information
# only a GET request to https://grafana.com to get the latest versions.
check_for_plugin_updates = <%= check_for_plugin_updates %>
<% end %>

<% if_p('grafana.analytics.google_analytics_ua_id') do |google_analytics_ua_id| %>
# Google Analytics universal tracking code, only enabled if you specify an id here
google_analytics_ua_id = <%= google_analytics_ua_id %>
<% end %>

<% if_p('grafana.analytics.google_analytics_4_id') do |google_analytics_4_id| %>
# Google Analytics 4 tracking code, only enabled if you specify an id here
google_analytics_4_id = <%= google_analytics_4_id %>
<% end %>

<% if_p('grafana.analytics.google_analytics_4_send_manual_page_views') do |google_analytics_4_send_manual_page_views| %>
# When Google Analytics 4 Enhanced event measurement is enabled, we will try to avoid sending duplicate events and let Google Analytics 4 detect navigation changes, etc.
google_analytics_4_send_manual_page_views = <%= google_analytics_4_send_manual_page_views %>
<% end %>

<% if_p('grafana.analytics.google_tag_manager_id') do |google_tag_manager_id| %>
# Google Tag Manager ID, only enabled if you specify an id here
google_tag_manager_id = <%= google_tag_manager_id %>
<% end %>

<% if_p('grafana.analytics.rudderstack_write_key') do |rudderstack_write_key| %>
# Rudderstack write key, enabled only if rudderstack_data_plane_url is also set
rudderstack_write_key = <%= rudderstack_write_key %>
<% end %>

<% if_p('grafana.analytics.rudderstack_data_plane_url') do |rudderstack_data_plane_url| %>
# Rudderstack data plane url, enabled only if rudderstack_write_key is also set
rudderstack_data_plane_url = <%= rudderstack_data_plane_url %>
<% end %>

<% if_p('grafana.analytics.rudderstack_sdk_url') do |rudderstack_sdk_url| %>
# Rudderstack SDK url, optional, only valid if rudderstack_write_key and rudderstack_data_plane_url is also set
rudderstack_sdk_url = <%= rudderstack_sdk_url %>
<% end %>

<% if_p('grafana.analytics.rudderstack_config_url') do |rudderstack_config_url| %>
# Rudderstack Config url, optional, used by Rudderstack SDK to fetch source config
rudderstack_config_url = <%= rudderstack_config_url %>
<% end %>

<% if_p('grafana.analytics.application_insights_connection_string') do |application_insights_connection_string| %>
# Application Insights connection string. Specify an URL string to enable this feature.
application_insights_connection_string = <%= application_insights_connection_string %>
<% end %>

<% if_p('grafana.analytics.application_insights_endpoint_url') do |application_insights_endpoint_url| %>
# Optional. Specifies an Application Insights endpoint URL where the endpoint string is wrapped in backticks ``.
application_insights_endpoint_url = <%= application_insights_endpoint_url %>
<% end %>

<% if_p('grafana.analytics.feedback_links_enabled') do |feedback_links_enabled| %>
# Controls if the UI contains any links to user feedback forms
feedback_links_enabled = <%= feedback_links_enabled %>
<% end %>

#################################### Security ####################################
[security]
<% if_p('grafana.security.disable_initial_admin_creation') do |disable_initial_admin_creation| %>
# disable creation of admin user on first start of grafana
disable_initial_admin_creation = <%= disable_initial_admin_creation %>
<% end %>

# default admin user, created on startup
admin_user = <%= p('grafana.security.admin_user') %>

# default admin password, can be changed before first start of grafana, or in profile settings
admin_password = <%= p('grafana.security.admin_password') %>

<% if_p('grafana.security.admin_email') do |admin_email| %>
# default admin email, created on startup
admin_email = <%= admin_email %>
<% end %>

<% if_p('grafana.security.secret_key') do |secret_key| %>
# used for signing
secret_key = <%= secret_key %>
<% end %>

<% if_p('grafana.security.encryption_provider') do |encryption_provider| %>
# current key provider used for envelope encryption, default to static value specified by secret_key
encryption_provider = <%= encryption_provider %>
<% end %>

<% if_p('grafana.security.available_encryption_providers') do |available_encryption_providers| %>
# list of configured key providers, space separated (Enterprise only): e.g., awskms.v1 azurekv.v1
available_encryption_providers = <%= available_encryption_providers %>
<% end %>

<% if_p('grafana.security.disable_gravatar') do |disable_gravatar| %>
# disable gravatar profile images
disable_gravatar = <%= disable_gravatar %>
<% end %>

<% if_p('grafana.security.data_source_proxy_whitelist') do |data_source_proxy_whitelist| %>
# data source proxy whitelist (ip_or_domain:port separated by spaces)
data_source_proxy_whitelist = <%= data_source_proxy_whitelist %>
<% end %>

<% if_p('grafana.security.disable_brute_force_login_protection') do |disable_brute_force_login_protection| %>
# disable protection against brute force login attempts
disable_brute_force_login_protection = <%= disable_brute_force_login_protection %>
<% end %>

<% if_p('grafana.security.cookie_secure') do |cookie_secure| %>
# set to true if you host Grafana behind HTTPS. default is false.
cookie_secure = <%= cookie_secure %>
<% end %>

<% if_p('grafana.security.cookie_samesite') do |cookie_samesite| %>
# set cookie SameSite attribute. defaults to `lax`. can be set to "lax", "strict", "none" and "disabled"
cookie_samesite = <%= cookie_samesite %>
<% end %>

<% if_p('grafana.security.allow_embedding') do |allow_embedding| %>
# set to true if you want to allow browsers to render Grafana in a <frame>, <iframe>, <embed> or <object>. default is false.
allow_embedding = <%= allow_embedding %>
<% end %>

<% if_p('grafana.security.strict_transport_security') do |strict_transport_security| %>
# Set to true if you want to enable http strict transport security (HSTS) response header.
# HSTS tells browsers that the site should only be accessed using HTTPS.
strict_transport_security = <%= strict_transport_security %>
<% end %>

<% if_p('grafana.security.strict_transport_security_max_age_seconds') do |strict_transport_security_max_age_seconds| %>
# Sets how long a browser should cache HSTS. Only applied if strict_transport_security is enabled.
strict_transport_security_max_age_seconds = <%= strict_transport_security_max_age_seconds %>
<% end %>

<% if_p('grafana.security.strict_transport_security_preload') do |strict_transport_security_preload| %>
# Set to true if to enable HSTS preloading option. Only applied if strict_transport_security is enabled.
strict_transport_security_preload = <%= strict_transport_security_preload %>
<% end %>

<% if_p('grafana.security.strict_transport_security_subdomains') do |strict_transport_security_subdomains| %>
# Set to true if to enable the HSTS includeSubDomains option. Only applied if strict_transport_security is enabled.
strict_transport_security_subdomains = <%= strict_transport_security_subdomains %>
<% end %>

<% if_p('grafana.security.x_content_type_options') do |x_content_type_options| %>
# Set to true to enable the X-Content-Type-Options response header.
# The X-Content-Type-Options response HTTP header is a marker used by the server to indicate that the MIME types advertised
# in the Content-Type headers should not be changed and be followed.
x_content_type_options = <%= x_content_type_options %>
<% end %>

<% if_p('grafana.security.x_xss_protection') do |x_xss_protection| %>
# Set to true to enable the X-XSS-Protection header, which tells browsers to stop pages from loading
# when they detect reflected cross-site scripting (XSS) attacks.
x_xss_protection = <%= x_xss_protection %>
<% end %>

<% if_p('grafana.security.content_security_policy') do |content_security_policy| %>
# Enable adding the Content-Security-Policy header to your requests.
# CSP allows to control resources the user agent is allowed to load and helps prevent XSS attacks.
content_security_policy = <%= content_security_policy %>
<% end %>

<% if_p('grafana.security.content_security_policy_template') do |content_security_policy_template| %>
# Set Content Security Policy template used when adding the Content-Security-Policy header to your requests.
# $NONCE in the template includes a random nonce.
# $ROOT_PATH is server.root_url without the protocol.
content_security_policy_template = <%= content_security_policy_template %>
<% end %>

<% if_p('grafana.security.content_security_policy_report_only') do |content_security_policy_report_only| %>
# Enable adding the Content-Security-Policy-Report-Only header to your requests.
# Allows you to monitor the effects of a policy without enforcing it.
content_security_policy_report_only = <%= content_security_policy_report_only %>
<% end %>

<% if_p('grafana.security.content_security_policy_report_only_template') do |content_security_policy_report_only_template| %>
# Set Content Security Policy Report Only template used when adding the Content-Security-Policy-Report-Only header to your requests.
# $NONCE in the template includes a random nonce.
# $ROOT_PATH is server.root_url without the protocol.
content_security_policy_report_only_template = <%= content_security_policy_report_only_template %>
<% end %>

<% if_p('grafana.security.angular_support_enabled') do |angular_support_enabled| %>
# Controls if old angular plugins are supported or not. This will be disabled by default in future release
angular_support_enabled = <%= angular_support_enabled %>
<% end %>

[security.encryption]
<% if_p('grafana.security.encryption.data_keys_cache_ttl') do |data_keys_cache_ttl| %>
# Defines the time-to-live (TTL) for decrypted data encryption keys stored in memory (cache).
# Please note that small values may cause performance issues due to a high frequency decryption operations.
data_keys_cache_ttl = <%= data_keys_cache_ttl %>
<% end %>

<% if_p('grafana.security.encryption.data_keys_cache_cleanup_interval') do |data_keys_cache_cleanup_interval| %>
# Defines the frequency of data encryption keys cache cleanup interval.
# On every interval, decrypted data encryption keys that reached the TTL are removed from the cache.
data_keys_cache_cleanup_interval = <%= data_keys_cache_cleanup_interval %>
<% end %>

#################################### Snapshots ###########################
[snapshots]
<% if_p('grafana.snapshots.enabled') do |enabled| %>
# set to false to remove snapshot functionality
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.snapshots.external_enabled', 'grafana.snapshots.external_snapshot_url', 'grafana.snapshots.external_snapshot_name') do |external_enabled, external_snapshot_url, external_snapshot_name| %>
# snapshot sharing options
external_enabled = <%= external_enabled %>
external_snapshot_url = <%= external_snapshot_url %>
external_snapshot_name = <%= external_snapshot_name %>
<% end %>

<% if_p('grafana.snapshots.public_mode') do |public_mode| %>
# Set to true to enable this Grafana instance act as an external snapshot server and allow unauthenticated requests for
# creating and deleting snapshots.
public_mode = <%= public_mode %>
<% end %>

<% if_p('grafana.snapshots.remove_expired') do |remove_expired| %>
# remove expired snapshot
snapshot_remove_expired = <%= remove_expired %>
<% end %>

#################################### Dashboards ##################
[dashboards]
<% if_p('grafana.dashboards.versions_to_keep') do |versions_to_keep| %>
# Number dashboard versions to keep (per dashboard). Default: 20, Minimum: 1
versions_to_keep = <%= versions_to_keep %>
<% end %>

<% if_p('grafana.dashboards.min_refresh_interval') do |min_refresh_interval| %>
# Minimum dashboard refresh interval. When set, this will restrict users to set the refresh interval of a dashboard lower than given interval. Per default this is 5 seconds.
# The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
min_refresh_interval = <%= min_refresh_interval %>
<% end %>

<% if_p('grafana.dashboards.default_home_dashboard_path') do |default_home_dashboard_path| %>
# Path to the default home dashboard. If this value is empty, then Grafana uses StaticRootPath + "dashboards/home.json"
default_home_dashboard_path = <%= default_home_dashboard_path %>
<% end %>

################################### Data sources #########################
[datasources]
<% if_p('grafana.datasources.datasource_limit') do |datasource_limit| %>
# Upper limit of data sources that Grafana will return. This limit is a temporary configuration and it will be deprecated when pagination will be introduced on the list data sources API.
datasource_limit = <%= datasource_limit %>
<% end %>


################################### Data sources #########################
[sql_datasources]
<% if_p('grafana.sql_datasources.max_open_conns_default') do |max_open_conns_default| %>
# Default maximum number of open connections maintained in the connection pool
# when connecting to SQL based data sources
max_open_conns_default = <%= max_open_conns_default %>
<% end %>

<% if_p('grafana.sql_datasources.max_idle_conns_default') do |max_idle_conns_default| %>
# Default maximum number of idle connections maintained in the connection pool
# when connecting to SQL based data sources
max_idle_conns_default = <%= max_idle_conns_default %>
<% end %>

<% if_p('grafana.sql_datasources.max_conn_lifetime_default') do |max_conn_lifetime_default| %>
# Default maximum connection lifetime used when connecting
# to SQL based data sources.
max_conn_lifetime_default = <%= max_conn_lifetime_default %>
<% end %>

#################################### Users ####################################
[users]
<% if_p('grafana.users.allow_sign_up') do |allow_sign_up| %>
# disable user signup / registration
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.users.allow_org_create') do |allow_org_create| %>
# Allow non admin users to create organizations
allow_org_create = <%= allow_org_create %>
<% end %>

<% if_p('grafana.users.auto_assign_org') do |auto_assign_org| %>
# Set to true to automatically assign new users to the default organization (id 1)
auto_assign_org = <%= auto_assign_org %>
<% end %>

<% if_p('grafana.users.auto_assign_org_id') do |auto_assign_org_id| %>
# Set this value to automatically add new users to the provided organization (if auto_assign_org above is set to true)
auto_assign_org_id = <%= auto_assign_org_id %>
<% end %>

<% if_p('grafana.users.auto_assign_org_role') do |auto_assign_org_role| %>
# Default role new users will be automatically assigned (if auto_assign_org above is set to true)
auto_assign_org_role = <%= auto_assign_org_role %>
<% end %>

<% if_p('grafana.users.verify_email_enabled') do |verify_email_enabled| %>
# Require email validation before sign up completes
verify_email_enabled = <%= verify_email_enabled %>
<% end %>

<% if_p('grafana.users.login_hint') do |login_hint| %>
# Background text for the user field on the login page
login_hint = <%= login_hint %>
<% end %>

<% if_p('grafana.users.password_hint') do |password_hint| %>
# Background text for the password field on the login page
password_hint = <%= password_hint %>
<% end %>

<% if_p('grafana.users.default_theme') do |default_theme| %>
# Default UI theme ("dark" or "light" or "system")
default_theme = <%= default_theme %>
<% end %>

<% if_p('grafana.users.default_language') do |default_language| %>
# Default UI language (supported IETF language tag, such as en-US)
default_language = <%= default_language %>
<% end %>

<% if_p('grafana.users.home_page') do |home_page| %>
# Path to a custom home page. Users are only redirected to this if the default home dashboard is used. It should match a frontend route and contain a leading slash.
home_page = <%= home_page %>
<% end %>

# External user management
<% if_p('grafana.users.external_manage_link_url') do |external_manage_link_url| %>
external_manage_link_url = <%= external_manage_link_url %>
<% end %>
<% if_p('grafana.users.external_manage_link_name') do |external_manage_link_name| %>
external_manage_link_name = <%= external_manage_link_name %>
<% end %>
<% if_p('grafana.users.external_manage_info') do |external_manage_info| %>
external_manage_info = <%= external_manage_info %>
<% end %>

<% if_p('grafana.users.viewers_can_edit') do |viewers_can_edit| %>
# Viewers can edit/inspect dashboard settings in the browser. But not save the dashboard.
viewers_can_edit = <%= viewers_can_edit %>
<% end %>

<% if_p('grafana.users.editors_can_admin') do |editors_can_admin| %>
# Editors can administrate dashboard, folders and teams they create
editors_can_admin = <%= editors_can_admin %>
<% end %>

<% if_p('grafana.users.user_invite_max_lifetime_duration') do |user_invite_max_lifetime_duration| %>
# The duration in time a user invitation remains valid before expiring. This setting should be expressed as a duration. Examples: 6h (hours), 2d (days), 1w (week). Default is 24h (24 hours). The minimum supported duration is 15m (15 minutes).
user_invite_max_lifetime_duration = <%= user_invite_max_lifetime_duration %>
<% end %>

<% if_p('grafana.users.hidden_users') do |hidden_users| %>
# Enter a comma-separated list of usernames to hide them in the Grafana UI. These users are shown to Grafana admins and to themselves.
hidden_users = <%= hidden_users %>
<% end %>

[service_accounts]
<% if_p('grafana.service_accounts.token_expiration_day_limit') do |token_expiration_day_limit| %>
# When set, Grafana will not allow the creation of tokens with expiry greater than this setting.
token_expiration_day_limit = <%= token_expiration_day_limit %>
<% end %>

[auth]
<% if_p('grafana.auth.login_cookie_name') do |login_cookie_name| %>
# Login cookie name
login_cookie_name = <%= login_cookie_name %>
<% end %>

<% if_p('grafana.auth.disable_login') do |disable_login| %>
# Disable usage of Grafana build-in login solution.
disable_login = <%= disable_login %>
<% end %>

<% if_p('grafana.auth.login_maximum_inactive_lifetime_duration') do |login_maximum_inactive_lifetime_duration| %>
# The maximum lifetime (duration) an authenticated user can be inactive before being required to login at next visit. Default is 7 days (7d). This setting should be expressed as a duration, e.g. 5m (minutes), 6h (hours), 10d (days), 2w (weeks), 1M (month). The lifetime resets at each successful token rotation (token_rotation_interval_minutes).
login_maximum_inactive_lifetime_duration = <%= login_maximum_inactive_lifetime_duration %>
<% end %>

<% if_p('grafana.auth.login_maximum_lifetime_duration') do |login_maximum_lifetime_duration| %>
# The maximum lifetime (duration) an authenticated user can be logged in since login time before being required to login. Default is 30 days (30d). This setting should be expressed as a duration, e.g. 5m (minutes), 6h (hours), 10d (days), 2w (weeks), 1M (month).
login_maximum_lifetime_duration = <%= login_maximum_lifetime_duration %>
<% end %>

<% if_p('grafana.auth.token_rotation_interval_minutes') do |token_rotation_interval_minutes| %>
# How often should auth tokens be rotated for authenticated users when being active. The default is each 10 minutes.
token_rotation_interval_minutes = <%= token_rotation_interval_minutes %>
<% end %>

<% if_p('grafana.auth.disable_login_form') do |disable_login_form| %>
# Set to true to disable (hide) the login form, useful if you use OAuth
disable_login_form = <%= disable_login_form %>
<% end %>

<% if_p('grafana.auth.disable_signout_menu') do |disable_signout_menu| %>
# Set to true to disable the sign out link in the side menu. Useful if you use auth.proxy or auth.jwt.
disable_signout_menu = <%= disable_signout_menu %>
<% end %>

<% if_p('grafana.auth.signout_redirect_url') do |signout_redirect_url| %>
# URL to redirect the user to after sign out
signout_redirect_url = <%= signout_redirect_url %>
<% end %>

<% if_p('grafana.auth.oauth_auto_login') do |oauth_auto_login| %>
# Set to true to attempt login with OAuth automatically, skipping the login screen.
# This setting is ignored if multiple OAuth providers are configured.
# Deprecated, use auto_login option for specific provider instead.
oauth_auto_login = <%= oauth_auto_login %>
<% end %>

<% if_p('grafana.auth.oauth_state_cookie_max_age') do |oauth_state_cookie_max_age| %>
# OAuth state max age cookie duration in seconds. Defaults to 600 seconds.
oauth_state_cookie_max_age = <%= oauth_state_cookie_max_age %>
<% end %>

<% if_p('grafana.auth.oauth_skip_org_role_update_sync') do |oauth_skip_org_role_update_sync| %>
# Skip forced assignment of OrgID 1 or 'auto_assign_org_id' for social logins
oauth_skip_org_role_update_sync = <%= oauth_skip_org_role_update_sync %>
<% end %>

<% if_p('grafana.auth.oauth_allow_insecure_email_lookup') do |oauth_allow_insecure_email_lookup| %>
# Enable user lookup based on email in addition to using unique ID provided by IdPs.
oauth_allow_insecure_email_lookup = <%= oauth_allow_insecure_email_lookup %>
<% end %>

<% if_p('grafana.auth.api_key_max_seconds_to_live') do |api_key_max_seconds_to_live| %>
# limit of api_key seconds to live before expiration
api_key_max_seconds_to_live = <%= api_key_max_seconds_to_live %>
<% end %>

<% if_p('grafana.auth.sigv4_auth_enabled') do |sigv4_auth_enabled| %>
# Set to true to enable SigV4 authentication option for HTTP-based datasources
sigv4_auth_enabled = <%= sigv4_auth_enabled %>
<% end %>

<% if_p('grafana.auth.sigv4_verbose_logging') do |sigv4_verbose_logging| %>
# Set to true to enable verbose logging of SigV4 request signing
sigv4_verbose_logging = <%= sigv4_verbose_logging %>
<% end %>

<% if_p('grafana.auth.azure_auth_enabled') do |azure_auth_enabled| %>
# Set to true to enable Azure authentication option for HTTP-based datasources
azure_auth_enabled = <%= azure_auth_enabled %>
<% end %>

#################################### Anonymous Auth ##########################
[auth.anonymous]
<% if_p('grafana.auth.anonymous.enabled') do |enabled| %>
# enable anonymous access
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.anonymous.org_name') do |org_name| %>
# specify organization name that should be used for unauthenticated users
org_name = <%= org_name %>
<% end %>

<% if_p('grafana.auth.anonymous.org_role') do |org_role| %>
# specify role for unauthenticated users
org_role = <%= org_role %>
<% end %>

<% if_p('grafana.auth.anonymous.hide_version') do |hide_version| %>
# mask the Grafana version number for unauthenticated users
hide_version = <%= hide_version %>
<% end %>

#################################### Github Auth ##########################
[auth.github]
<% if_p('grafana.auth.github.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.github.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.github.auto_login') do |auto_login| %>
auto_login = <%= auto_login %>
<% end %>

<% if_p('grafana.auth.github.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.github.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.github.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.github.auth_url') do |auth_url| %>
auth_url = <%= auth_url %>
<% end %>

<% if_p('grafana.auth.github.token_url') do |token_url| %>
token_url = <%= token_url %>
<% end %>

<% if_p('grafana.auth.github.api_url') do |api_url| %>
api_url = <%= api_url %>
<% end %>

<% if_p('grafana.auth.github.allowed_domains') do |allowed_domains| %>
allowed_domains = <%= allowed_domains %>
<% end %>

<% if_p('grafana.auth.github.team_ids') do |team_ids| %>
team_ids = <%= team_ids %>
<% end %>

<% if_p('grafana.auth.github.allowed_organizations') do |allowed_organizations| %>
allowed_organizations = <%= allowed_organizations %>
<% end %>

<% if_p('grafana.auth.github.role_attribute_path') do |role_attribute_path| %>
role_attribute_path = <%= role_attribute_path %>
<% end %>

<% if_p('grafana.auth.github.role_attribute_strict') do |role_attribute_strict| %>
role_attribute_strict = <%= role_attribute_strict %>
<% end %>

<% if_p('grafana.auth.github.allow_assign_grafana_admin') do |allow_assign_grafana_admin| %>
allow_assign_grafana_admin = <%= allow_assign_grafana_admin %>
<% end %>

#################################### GitLab Auth #########################
[auth.gitlab]
<% if_p('grafana.auth.gitlab.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.gitlab.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.gitlab.auto_login') do |auto_login| %>
auto_login = <%= auto_login %>
<% end %>

<% if_p('grafana.auth.gitlab.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.gitlab.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.gitlab.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.gitlab.auth_url') do |auth_url| %>
auth_url = <%= auth_url %>
<% end %>

<% if_p('grafana.auth.gitlab.token_url') do |token_url| %>
token_url = <%= token_url %>
<% end %>

<% if_p('grafana.auth.gitlab.api_url') do |api_url| %>
api_url = <%= api_url %>
<% end %>

<% if_p('grafana.auth.gitlab.allowed_domains') do |allowed_domains| %>
allowed_domains = <%= allowed_domains %>
<% end %>

<% if_p('grafana.auth.gitlab.allowed_groups') do |allowed_groups| %>
allowed_groups = <%= allowed_groups %>
<% end %>

<% if_p('grafana.auth.gitlab.role_attribute_path') do |role_attribute_path| %>
role_attribute_path = <%= role_attribute_path %>
<% end %>

<% if_p('grafana.auth.gitlab.role_attribute_strict') do |role_attribute_strict| %>
role_attribute_strict = <%= role_attribute_strict %>
<% end %>

<% if_p('grafana.auth.gitlab.allow_assign_grafana_admin') do |allow_assign_grafana_admin| %>
allow_assign_grafana_admin = <%= allow_assign_grafana_admin %>
<% end %>

<% if_p('grafana.auth.gitlab.skip_org_role_sync') do |skip_org_role_sync| %>
skip_org_role_sync = <%= skip_org_role_sync %>
<% end %>

#################################### Google Auth ##########################
[auth.google]
<% if_p('grafana.auth.google.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.google.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.google.auto_login') do |auto_login| %>
auto_login = <%= auto_login %>
<% end %>

<% if_p('grafana.auth.google.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.google.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.google.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.google.auth_url') do |auth_url| %>
auth_url = <%= auth_url %>
<% end %>

<% if_p('grafana.auth.google.token_url') do |token_url| %>
token_url = <%= token_url %>
<% end %>

<% if_p('grafana.auth.google.api_url') do |api_url| %>
api_url = <%= api_url %>
<% end %>

<% if_p('grafana.auth.google.allowed_domains') do |allowed_domains| %>
allowed_domains = <%= allowed_domains %>
<% end %>

<% if_p('grafana.auth.google.hosted_domain') do |hosted_domain| %>
hosted_domain = <%= hosted_domain %>
<% end %>

<% if_p('grafana.auth.google.skip_org_role_sync') do |skip_org_role_sync| %>
skip_org_role_sync = <%= skip_org_role_sync %>
<% end %>

#################################### Grafana.net Auth ####################
# legacy key names (so they work in env variables)
[auth.grafananet]
<% if_p('grafana.auth.grafananet.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.grafananet.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.grafananet.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.grafananet.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.grafananet.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.grafananet.allowed_organizations') do |allowed_organizations| %>
allowed_organizations = <%= allowed_organizations %>
<% end %>

#################################### Grafana.com Auth ####################
[auth.grafana_com]
<% if_p('grafana.auth.grafanacom.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.grafanacom.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.grafanacom.auto_login') do |auto_login| %>
auto_login = <%= auto_login %>
<% end %>

<% if_p('grafana.auth.grafanacom.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.grafanacom.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.grafanacom.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.grafanacom.allowed_organizations') do |allowed_organizations| %>
allowed_organizations = <%= allowed_organizations %>
<% end %>

<% if_p('grafana.auth.grafanacom.skip_org_role_sync') do |skip_org_role_sync| %>
skip_org_role_sync = <%= skip_org_role_sync %>
<% end %>

#################################### Azure AD OAuth #######################
[auth.azuread]
<% if_p('grafana.auth.azuread.name') do |name| %>
name = <%= name %>
<% end %>

<% if_p('grafana.auth.azuread.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.azuread.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.azuread.auto_login') do |auto_login| %>
auto_login = <%= auto_login %>
<% end %>

<% if_p('grafana.auth.azuread.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.azuread.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.azuread.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.azuread.auth_url') do |auth_url| %>
auth_url = <%= auth_url %>
<% end %>

<% if_p('grafana.auth.azuread.token_url') do |token_url| %>
token_url = <%= token_url %>
<% end %>

<% if_p('grafana.auth.azuread.allowed_domains') do |allowed_domains| %>
allowed_domains = <%= allowed_domains %>
<% end %>

<% if_p('grafana.auth.azuread.allowed_groups') do |allowed_groups| %>
allowed_groups = <%= allowed_groups %>
<% end %>

<% if_p('grafana.auth.azuread.role_attribute_strict') do |role_attribute_strict| %>
role_attribute_strict = <%= role_attribute_strict %>
<% end %>

<% if_p('grafana.auth.azuread.allow_assign_grafana_admin') do |allow_assign_grafana_admin| %>
allow_assign_grafana_admin = <%= allow_assign_grafana_admin %>
<% end %>

<% if_p('grafana.auth.azuread.force_use_graph_api') do |force_use_graph_api| %>
force_use_graph_api = <%= force_use_graph_api %>
<% end %>

#################################### Okta OAuth #######################
[auth.okta]
<% if_p('grafana.auth.okta.name') do |name| %>
name = <%= name %>
<% end %>

<% if_p('grafana.auth.okta.icon') do |icon| %>
icon = <%= icon %>
<% end %>

<% if_p('grafana.auth.okta.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.okta.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.okta.auto_login') do |auto_login| %>
auto_login = <%= auto_login %>
<% end %>

<% if_p('grafana.auth.okta.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.okta.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.okta.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.okta.auth_url') do |auth_url| %>
auth_url = <%= auth_url %>
<% end %>

<% if_p('grafana.auth.okta.token_url') do |token_url| %>
token_url = <%= token_url %>
<% end %>

<% if_p('grafana.auth.okta.api_url') do |api_url| %>
api_url = <%= api_url %>
<% end %>

<% if_p('grafana.auth.okta.allowed_domains') do |allowed_domains| %>
allowed_domains = <%= allowed_domains %>
<% end %>

<% if_p('grafana.auth.okta.allowed_groups') do |allowed_groups| %>
allowed_groups = <%= allowed_groups %>
<% end %>

<% if_p('grafana.auth.okta.role_attribute_path') do |role_attribute_path| %>
role_attribute_path = <%= role_attribute_path %>
<% end %>

<% if_p('grafana.auth.okta.role_attribute_strict') do |role_attribute_strict| %>
role_attribute_strict = <%= role_attribute_strict %>
<% end %>

<% if_p('grafana.auth.okta.allow_assign_grafana_admin') do |allow_assign_grafana_admin| %>
allow_assign_grafana_admin = <%= allow_assign_grafana_admin %>
<% end %>

<% if_p('grafana.auth.okta.skip_org_role_sync') do |skip_org_role_sync| %>
skip_org_role_sync = <%= skip_org_role_sync %>
<% end %>

#################################### Generic OAuth ##########################
[auth.generic_oauth]
<% if_p('grafana.auth.generic_oauth.name') do |name| %>
name = <%= name %>
<% end %>

<% if_p('grafana.auth.generic_oauth.icon') do |icon| %>
icon = <%= icon %>
<% end %>

<% if_p('grafana.auth.generic_oauth.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.generic_oauth.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.generic_oauth.auto_login') do |auto_login| %>
auto_login = <%= auto_login %>
<% end %>

<% if_p('grafana.auth.generic_oauth.client_id') do |client_id| %>
client_id = <%= client_id %>
<% end %>

<% if_p('grafana.auth.generic_oauth.client_secret') do |client_secret| %>
client_secret = <%= client_secret %>
<% end %>

<% if_p('grafana.auth.generic_oauth.scopes') do |scopes| %>
scopes = <%= scopes %>
<% end %>

<% if_p('grafana.auth.generic_oauth.empty_scopes') do |empty_scopes| %>
empty_scopes = <%= empty_scopes %>
<% end %>

<% if_p('grafana.auth.generic_oauth.email_attribute_name') do |email_attribute_name| %>
email_attribute_name = <%= email_attribute_name %>
<% end %>

<% if_p('grafana.auth.generic_oauth.email_attribute_path') do |email_attribute_path| %>
email_attribute_path = <%= email_attribute_path %>
<% end %>

<% if_p('grafana.auth.generic_oauth.login_attribute_path') do |login_attribute_path| %>
login_attribute_path = <%= login_attribute_path %>
<% end %>

<% if_p('grafana.auth.generic_oauth.name_attribute_path') do |name_attribute_path| %>
name_attribute_path = <%= name_attribute_path %>
<% end %>

<% if_p('grafana.auth.generic_oauth.role_attribute_path') do |role_attribute_path| %>
role_attribute_path = <%= role_attribute_path %>
<% end %>

<% if_p('grafana.auth.generic_oauth.role_attribute_strict') do |role_attribute_strict| %>
role_attribute_strict = <%= role_attribute_strict %>
<% end %>

<% if_p('grafana.auth.generic_oauth.groups_attribute_path') do |groups_attribute_path| %>
groups_attribute_path = <%= groups_attribute_path %>
<% end %>

<% if_p('grafana.auth.generic_oauth.id_token_attribute_name') do |id_token_attribute_name| %>
id_token_attribute_name = <%= id_token_attribute_name %>
<% end %>

<% if_p('grafana.auth.generic_oauth.team_ids_attribute_path') do |team_ids_attribute_path| %>
team_ids_attribute_path = <%= team_ids_attribute_path %>
<% end %>

<% if_p('grafana.auth.generic_oauth.auth_url') do |auth_url| %>
auth_url = <%= auth_url %>
<% end %>

<% if_p('grafana.auth.generic_oauth.token_url') do |token_url| %>
token_url = <%= token_url %>
<% end %>

<% if_p('grafana.auth.generic_oauth.api_url') do |api_url| %>
api_url = <%= api_url %>
<% end %>

<% if_p('grafana.auth.generic_oauth.teams_url') do |teams_url| %>
teams_url = <%= teams_url %>
<% end %>

<% if_p('grafana.auth.generic_oauth.allowed_domains') do |allowed_domains| %>
allowed_domains = <%= allowed_domains %>
<% end %>

<% if_p('grafana.auth.generic_oauth.team_ids') do |team_ids| %>
team_ids = <%= team_ids %>
<% end %>

<% if_p('grafana.auth.generic_oauth.allowed_organizations') do |allowed_organizations| %>
allowed_organizations = <%= allowed_organizations %>
<% end %>

<% if_p('grafana.auth.generic_oauth.tls_client_ca') do %>
tls_client_ca = /var/vcap/jobs/grafana/config/generic_oauth_tls_client_ca.pem
<% end %>

<% if_p('grafana.auth.generic_oauth.tls_client_cert', 'grafana.auth.generic_oauth.tls_client_key') do %>
tls_client_cert = /var/vcap/jobs/grafana/config/generic_oauth_tls_client_cert.pem
tls_client_key = /var/vcap/jobs/grafana/config/generic_oauth_tls_client_key.pem
<% end %>

<% if_p('grafana.auth.generic_oauth.tls_skip_verify_insecure') do |tls_skip_verify_insecure| %>
tls_skip_verify_insecure = <%= tls_skip_verify_insecure %>
<% end %>

<% if_p('grafana.auth.generic_oauth.use_pkce') do |use_pkce| %>
use_pkce = <%= use_pkce %>
<% end %>

<% if_p('grafana.auth.generic_oauth.auth_style') do |auth_style| %>
auth_style = <%= auth_style %>
<% end %>

<% if_p('grafana.auth.generic_oauth.allow_assign_grafana_admin') do |allow_assign_grafana_admin| %>
allow_assign_grafana_admin = <%= allow_assign_grafana_admin %>
<% end %>

#################################### Basic Auth ##########################
[auth.basic]
<% if_p('grafana.auth.basic.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>


#################################### Auth Proxy ##########################
[auth.proxy]
<% if_p('grafana.auth.proxy.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.proxy.header_name') do |header_name| %>
header_name = <%= header_name %>
<% end %>

<% if_p('grafana.auth.proxy.header_property') do |header_property| %>
header_property = <%= header_property %>
<% end %>

<% if_p('grafana.auth.proxy.auto_sign_up') do |auto_sign_up| %>
auto_sign_up = <%= auto_sign_up %>
<% end %>

<% if_p('grafana.auth.proxy.sync_ttl') do |sync_ttl| %>
sync_ttl = <%= sync_ttl %>
<% end %>

<% if_p('grafana.auth.proxy.whitelist') do |whitelist| %>
whitelist = <%= whitelist %>
<% end %>

<% if_p('grafana.auth.proxy.headers') do |headers| %>
headers = <%= headers %>
<% end %>

<% if_p('grafana.auth.proxy.headers_encoded') do |headers_encoded| %>
headers_encoded = <%= headers_encoded %>
<% end %>

<% if_p('grafana.auth.proxy.enable_login_token') do |enable_login_token| %>
enable_login_token = <%= enable_login_token %>
<% end %>

#################################### Auth JWT ##########################
[auth.jwt]
<% if_p('grafana.auth.jwt.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.jwt.enable_login_token') do |enable_login_token| %>
enable_login_token = <%= enable_login_token %>
<% end %>

<% if_p('grafana.auth.jwt.header_name') do |header_name| %>
header_name = <%= header_name %>
<% end %>

<% if_p('grafana.auth.jwt.email_claim') do |email_claim| %>
email_claim = <%= email_claim %>
<% end %>

<% if_p('grafana.auth.jwt.username_claim') do |username_claim| %>
username_claim = <%= username_claim %>
<% end %>

<% if_p('grafana.auth.jwt.jwk_set_url') do |jwk_set_url| %>
jwk_set_url = <%= jwk_set_url %>
<% end %>

<% if_p('grafana.auth.jwt.jwk_set_file') do |jwk_set_file| %>
jwk_set_file = <%= jwk_set_file %>
<% end %>

<% if_p('grafana.auth.jwt.cache_ttl') do |cache_ttl| %>
cache_ttl = <%= cache_ttl %>
<% end %>

<% if_p('grafana.auth.jwt.expect_claims') do |expect_claims| %>
expect_claims = <%= expect_claims %>
<% end %>

<% if_p('grafana.auth.jwt.key') do |key_file| %>
key_file = /var/vcap/jobs/grafana/config/jwt_key.pem
<% end %>

<% if_p('grafana.auth.jwt.key_file') do |key_file| %>
key_file = <%= key_file %>
<% end %>

<% if_p('grafana.auth.jwt.role_attribute_path') do |role_attribute_path| %>
role_attribute_path = <%= role_attribute_path %>
<% end %>

<% if_p('grafana.auth.jwt.role_attribute_strict') do |role_attribute_strict| %>
role_attribute_strict = <%= role_attribute_strict %>
<% end %>

<% if_p('grafana.auth.jwt.auto_sign_up') do |auto_sign_up| %>
auto_sign_up = <%= auto_sign_up %>
<% end %>

<% if_p('grafana.auth.jwt.url_login') do |url_login| %>
url_login = <%= url_login %>
<% end %>

<% if_p('grafana.auth.jwt.allow_assign_grafana_admin') do |allow_assign_grafana_admin| %>
allow_assign_grafana_admin = <%= allow_assign_grafana_admin %>
<% end %>

<% if_p('grafana.auth.jwt.skip_org_role_sync') do |skip_org_role_sync| %>
skip_org_role_sync = <%= skip_org_role_sync %>
<% end %>

#################################### Auth LDAP ##########################
[auth.ldap]
<% if_p('grafana.auth.ldap.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.auth.ldap.config') do %>
config_file = /var/vcap/jobs/grafana/config/ldap.toml
<% end %>

<% if_p('grafana.auth.ldap.allow_sign_up') do |allow_sign_up| %>
allow_sign_up = <%= allow_sign_up %>
<% end %>

<% if_p('grafana.auth.ldap.skip_org_role_sync') do |skip_org_role_sync| %>
# LDAP backround sync (Enterprise only)
skip_org_role_sync = <%= skip_org_role_sync %>
<% end %>

<% if_p('grafana.auth.ldap.sync_cron') do |sync_cron| %>
# LDAP background sync (Enterprise only)
# At 1 am every day
sync_cron = <%= sync_cron %>
<% end %>

<% if_p('grafana.auth.ldap.active_sync_enabled') do |active_sync_enabled| %>
active_sync_enabled = <%= active_sync_enabled %>
<% end %>

#################################### AWS ###########################
[aws]
<% if_p('grafana.aws.allowed_auth_providers') do |allowed_auth_providers| %>
# Enter a comma-separated list of allowed AWS authentication providers.
# Options are: default (AWS SDK Default), keys (Access && secret key), credentials (Credentials field), ec2_iam_role (EC2 IAM Role)
allowed_auth_providers = <%= allowed_auth_providers %>
<% end %>

<% if_p('grafana.aws.assume_role_enabled') do |assume_role_enabled| %>
# Allow AWS users to assume a role using temporary security credentials.
# If true, assume role will be enabled for all AWS authentication providers that are specified in aws_auth_providers
assume_role_enabled = <%= assume_role_enabled %>
<% end %>

<% if_p('grafana.aws.list_metrics_page_limit') do |list_metrics_page_limit| %>
# Specify max no of pages to be returned by the ListMetricPages API
list_metrics_page_limit = <%= list_metrics_page_limit %>
<% end %>

#################################### Azure ###############################
[azure]
<% if_p('grafana.azure.cloud') do |cloud| %>
# Azure cloud environment where Grafana is hosted
# Possible values are AzureCloud, AzureChinaCloud, AzureUSGovernment and AzureGermanCloud
# Default value is AzureCloud (i.e. public cloud)
cloud = <%= cloud %>
<% end %>

<% if_p('grafana.azure.managed_identity_enabled') do |managed_identity_enabled| %>
# Specifies whether Grafana hosted in Azure service with Managed Identity configured (e.g. Azure Virtual Machines instance)
# If enabled, the managed identity can be used for authentication of Grafana in Azure services
# Disabled by default, needs to be explicitly enabled
managed_identity_enabled = <%= managed_identity_enabled %>
<% end %>

<% if_p('grafana.azure.managed_identity_client_id') do |managed_identity_client_id| %>
# Client ID to use for user-assigned managed identity
# Should be set for user-assigned identity and should be empty for system-assigned identity
managed_identity_client_id = <%= managed_identity_client_id %>
<% end %>

#################################### Role-based Access Control ###########
[rbac]
<% if_p('grafana.rbac.permission_cache') do |permission_cache| %>
# If enabled, cache permissions in a in memory cache
permission_cache = <%= permission_cache %>
<% end %>

<% if_p('grafana.rbac.reset_basic_roles') do |reset_basic_roles| %>
# Reset basic roles permissions on boot
# Warning left to true, basic roles permissions will be reset on every boot
reset_basic_roles = <%= reset_basic_roles %>
<% end %>

#################################### SMTP / Emailing #####################
[smtp]
<% if_p('grafana.smtp.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.smtp.host') do |host| %>
host = <%= host %>
<% end %>

<% if_p('grafana.smtp.user') do |user| %>
user = <%= user %>
<% end %>

<% if_p('grafana.smtp.password') do |password| %>
# If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
password = <%= password %>
<% end %>

<% if_p('grafana.smtp.ssl_cert') do %>
cert_file = /var/vcap/jobs/grafana/config/smtp_cert.pem
<% end %>

<% if_p('grafana.smtp.ssl_key') do %>
key_file = /var/vcap/jobs/grafana/config/smtp_key.pem
<% end %>

<% if_p('grafana.smtp.skip_verify') do |skip_verify| %>
skip_verify = <%= skip_verify %>
<% end %>

<% if_p('grafana.smtp.from_address') do |from_address| %>
from_address = <%= from_address %>
<% end %>

<% if_p('grafana.smtp.from_name') do |from_name| %>
from_name = <%= from_name %>
<% end %>

<% if_p('grafana.smtp.ehlo_identity') do |ehlo_identity| %>
ehlo_identity = <%= ehlo_identity %>
<% end %>

<% if_p('grafana.smtp.starttls_policy') do |starttls_policy| %>
startTLS_policy = <%= starttls_policy %>
<% end %>

[emails]
<% if_p('grafana.emails.welcome_email_on_sign_up') do |welcome_email_on_sign_up| %>
welcome_email_on_sign_up = <%= welcome_email_on_sign_up %>
<% end %>

<% if_p('grafana.emails.templates_pattern') do |templates_pattern| %>
templates_pattern = <%= templates_pattern %>
<% end %>

<% if_p('grafana.emails.content_types') do |content_types| %>
content_types = <%= content_types %>
<% end %>

#################################### Logging ##########################
[log]
<% if_p('grafana.log.mode') do |mode| %>
# Either "console", "file", "syslog". Default is console and file
# Use space to separate multiple modes, e.g. "console file"
mode = <%= mode %>
<% end %>

<% if_p('grafana.log.level') do |level| %>
# Either "debug", "info", "warn", "error", "critical", default is "info"
level = <%= level %>
<% end %>

<% if_p('grafana.log.filters') do |filters| %>
# optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug
filters = <%= filters %>
<% end %>

# For "console" mode only
[log.console]
<% if_p('grafana.log.console.level') do |level| %>
level = <%= level %>
<% end %>

<% if_p('grafana.log.console.format') do |format| %>
# log line format, valid options are text, console and json
format = <%= format %>
<% end %>

# For "file" mode only
[log.file]
<% if_p('grafana.log.file.level') do |level| %>
level = <%= level %>
<% end %>

<% if_p('grafana.log.file.format') do |format| %>
# log line format, valid options are text, console and json
format = <%= format %>
<% end %>

<% if_p('grafana.log.file.log_rotate') do |log_rotate| %>
# This enables automated log rotate(switch of following options), default is true
log_rotate = <%= log_rotate %>
<% end %>

<% if_p('grafana.log.file.max_lines') do |max_lines| %>
# Max line number of single file, default is 1000000
max_lines = <%= max_lines %>
<% end %>

<% if_p('grafana.log.file.max_size_shift') do |max_size_shift| %>
# Max size shift of single file, default is 28 means 1 << 28, 256MB
max_size_shift = <%= max_size_shift %>
<% end %>

<% if_p('grafana.log.file.daily_rotate') do |daily_rotate| %>
# Segment log daily, default is true
daily_rotate = <%= daily_rotate %>
<% end %>

<% if_p('grafana.log.file.max_days') do |max_days| %>
# Expired days of log file(delete after max days), default is 7
max_days = <%= max_days %>
<% end %>

# For "syslog" mode only
[log.syslog]
<% if_p('grafana.log.syslog.level') do |level| %>
level = <%= level %>
<% end %>

<% if_p('grafana.log.syslog.format') do |format| %>
# log line format, valid options are text, console and json
format = <%= format %>
<% end %>

<% if_p('grafana.log.syslog.network', 'grafana.log.syslog.address') do |network, address| %>
# Syslog network type and address. This can be udp, tcp, or unix. If left blank, the default unix endpoints will be used.
network = <%= network %>
address = <%= address %>
<% end %>

<% if_p('grafana.log.syslog.facility') do |facility| %>
# Syslog facility. user, daemon and local0 through local7 are valid.
facility = <%= facility %>
<% end %>

<% if_p('grafana.log.syslog.tag') do |tag| %>
# Syslog tag. By default, the process' argv[0] is used.
tag = <%= tag %>
<% end %>

[log.frontend]
<% if_p('grafana.log.frontend.enabled') do |enabled| %>
# Should Sentry javascript agent be initialized
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.log.frontend.provider') do |provider| %>
# Defines which provider to use sentry or grafana
provider = <%= provider %>
<% end %>

<% if_p('grafana.log.frontend.sentry_dsn') do |sentry_dsn| %>
# Sentry DSN if you want to send events to Sentry.
sentry_dsn = <%= sentry_dsn %>
<% end %>

<% if_p('grafana.log.frontend.custom_endpoint') do |custom_endpoint| %>
# Custom HTTP endpoint to send events to. Default will log the events to stdout.
custom_endpoint = <%= custom_endpoint %>
<% end %>

<% if_p('grafana.log.frontend.sample_rate') do |sample_rate| %>
# Rate of events to be reported to Sentry between 0 (none) and 1 (all), float
sample_rate = <%= sample_rate %>
<% end %>

<% if_p('grafana.log.frontend.log_endpoint_requests_per_second_limit') do |log_endpoint_requests_per_second_limit| %>
# Requests per second limit enforced per an extended period, for Grafana backend log ingestion endpoint (/log).
log_endpoint_requests_per_second_limit = <%= log_endpoint_requests_per_second_limit %>
<% end %>

<% if_p('grafana.log.frontend.log_endpoint_burst_limit') do |log_endpoint_burst_limit| %>
# Max requests accepted per short interval of time for Grafana backend log ingestion endpoint (/log)
log_endpoint_burst_limit = <%= log_endpoint_burst_limit %>
<% end %>

<% if_p('grafana.log.frontend.instrumentations_errors_enabled') do |instrumentations_errors_enabled| %>
# Should error instrumentation be enabled, only affects Grafana Javascript Agent
instrumentations_errors_enabled = <%= instrumentations_errors_enabled %>
<% end %>

<% if_p('grafana.log.frontend.instrumentations_console_enabled') do |instrumentations_console_enabled| %>
# Should console instrumentation be enabled, only affects Grafana Javascript Agent
instrumentations_console_enabled = <%= instrumentations_console_enabled %>
<% end %>

<% if_p('grafana.log.frontend.instrumentations_webvitals_enabled') do |instrumentations_webvitals_enabled| %>
# Should webvitals instrumentation be enabled, only affects Grafana Javascript Agent
instrumentations_webvitals_enabled = <%= instrumentations_webvitals_enabled %>
<% end %>

<% if_p('grafana.log.frontend.api_key') do |api_key| %>
# Api Key, only applies to Grafana Javascript Agent provider
api_key = <%= api_key %>
<% end %>

#################################### Usage Quotas ########################
[quota]
<% if_p('grafana.quota.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.quota.org_user') do |org_user| %>
#### set quotas to -1 to make unlimited. ####
# limit number of users per Org.
org_user = <%= org_user %>
<% end %>

<% if_p('grafana.quota.org_dashboard') do |org_dashboard| %>
# limit number of dashboards per Org.
org_dashboard = <%= org_dashboard %>
<% end %>

<% if_p('grafana.quota.org_data_source') do |org_data_source| %>
# limit number of data_sources per Org.
org_data_source = <%= org_data_source %>
<% end %>

<% if_p('grafana.quota.org_api_key') do |org_api_key| %>
# limit number of api_keys per Org.
org_api_key = <%= org_api_key %>
<% end %>

<% if_p('grafana.quota.org_alert_rule') do |org_alert_rule| %>
# limit number of alerts per Org.
org_alert_rule = <%= org_alert_rule %>
<% end %>

<% if_p('grafana.quota.user_org') do |user_org| %>
# limit number of orgs a user can create.
user_org = <%= user_org %>
<% end %>

<% if_p('grafana.quota.global_user') do |global_user| %>
# Global limit of users.
global_user = <%= global_user %>
<% end %>

<% if_p('grafana.quota.global_org') do |global_org| %>
# global limit of orgs.
global_org = <%= global_org %>
<% end %>

<% if_p('grafana.quota.global_dashboard') do |global_dashboard| %>
# global limit of dashboards
global_dashboard = <%= global_dashboard %>
<% end %>

<% if_p('grafana.quota.global_api_key') do |global_api_key| %>
# global limit of api_keys
global_api_key = <%= global_api_key %>
<% end %>

<% if_p('grafana.quota.global_session') do |global_session| %>
# global limit on number of logged in users.
global_session = <%= global_session %>
<% end %>

<% if_p('grafana.quota.global_alert_rule') do |global_alert_rule| %>
# global limit of alerts
global_alert_rule = <%= global_alert_rule %>
<% end %>

<% if_p('grafana.quota.global_file') do |global_file| %>
# global limit of files uploaded to the SQL DB
global_file = <%= global_file %>
<% end %>

#################################### Unified Alerting ####################
[unified_alerting]
<% if_p('grafana.unified_alerting.enabled') do |enabled| %>
# Enable the Unified Alerting sub-system and interface. When enabled we'll migrate all of your alert rules and notification channels to the new system. New alert rules will be created and your notification channels will be converted into an Alertmanager configuration. Previous data is preserved to enable backwards compatibility but new data is removed when switching. When this configuration section and flag are not defined, the state is defined at runtime. See the documentation for more details.
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.unified_alerting.disabled_orgs') do |disabled_orgs| %>
# Comma-separated list of organization IDs for which to disable unified alerting. Only supported if unified alerting is enabled.
disabled_orgs = <%= disabled_orgs %>
<% end %>

<% if_p('grafana.unified_alerting.admin_config_poll_interval') do |admin_config_poll_interval| %>
# Specify the frequency of polling for admin config changes.
# The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
admin_config_poll_interval = <%= admin_config_poll_interval %>
<% end %>

<% if_p('grafana.unified_alerting.alertmanager_config_poll_interval') do |alertmanager_config_poll_interval| %>
# Specify the frequency of polling for Alertmanager config changes.
# The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
alertmanager_config_poll_interval = <%= alertmanager_config_poll_interval %>
<% end %>

<% if_p('grafana.unified_alerting.ha_listen_address') do |ha_listen_address| %>
# Listen address/hostname and port to receive unified alerting messages for other Grafana instances. The port is used for both TCP and UDP. It is assumed other Grafana instances are also running on the same port.
ha_listen_address = <%= ha_listen_address %>
<% end %>

<% if_p('grafana.unified_alerting.ha_advertise_address') do |ha_advertise_address| %>
# Explicit address/hostname and port to advertise other Grafana instances. The port is used for both TCP and UDP.
ha_advertise_address = <%= ha_advertise_address %>
<% end %>

<% if_p('grafana.unified_alerting.ha_peers') do |ha_peers| %>
# Comma-separated list of initial instances (in a format of host:port) that will form the HA cluster. Configuring this setting will enable High Availability mode for alerting.
ha_peers = <%= ha_peers %>
<% end %>

<% if_p('grafana.unified_alerting.ha_peer_timeout') do |ha_peer_timeout| %>
# Time to wait for an instance to send a notification via the Alertmanager. In HA, each Grafana instance will
# be assigned a position (e.g. 0, 1). We then multiply this position with the timeout to indicate how long should
# each instance wait before sending the notification to take into account replication lag.
# The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
ha_peer_timeout = <%= ha_peer_timeout %>
<% end %>

<% if_p('grafana.unified_alerting.ha_gossip_interval') do |ha_gossip_interval| %>
# The interval between sending gossip messages. By lowering this value (more frequent) gossip messages are propagated
# across cluster more quickly at the expense of increased bandwidth usage.
# The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
ha_gossip_interval = <%= ha_gossip_interval %>
<% end %>

<% if_p('grafana.unified_alerting.ha_push_pull_interval') do |ha_push_pull_interval| %>
# The interval between gossip full state syncs. Setting this interval lower (more frequent) will increase convergence speeds
# across larger clusters at the expense of increased bandwidth usage.
# The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
ha_push_pull_interval = <%= ha_push_pull_interval %>
<% end %>

<% if_p('grafana.unified_alerting.execute_alerts') do |execute_alerts| %>
# Enable or disable alerting rule execution. The alerting UI remains visible. This option has a legacy version in the `[alerting]` section that takes precedence.
execute_alerts = <%= execute_alerts %>
<% end %>

<% if_p('grafana.unified_alerting.evaluation_timeout') do |evaluation_timeout| %>
# Alert evaluation timeout when fetching data from the datasource. This option has a legacy version in the `[alerting]` section that takes precedence.
# The timeout string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
evaluation_timeout = <%= evaluation_timeout %>
<% end %>

<% if_p('grafana.unified_alerting.max_attempts') do |max_attempts| %>
# Number of times we'll attempt to evaluate an alert rule before giving up on that evaluation. This option has a legacy version in the `[alerting]` section that takes precedence.
max_attempts = <%= max_attempts %>
<% end %>

<% if_p('grafana.unified_alerting.min_interval') do |min_interval| %>
# Minimum interval to enforce between rule evaluations. Rules will be adjusted if they are less than this value or if they are not multiple of the scheduler interval (10s). Higher values can help with resource management as we'll schedule fewer evaluations over time. This option has a legacy version in the `[alerting]` section that takes precedence.
# The interval string is a possibly signed sequence of decimal numbers, followed by a unit suffix (ms, s, m, h, d), e.g. 30s or 1m.
min_interval = <%= min_interval %>
<% end %>

[unified_alerting.screenshots]
<% if_p('grafana.unified_alerting.screenshots.capture') do |capture| %>
# Enable screenshots in notifications. This option requires the Grafana Image Renderer plugin.
# For more information on configuration options, refer to [rendering].
capture = <%= capture %>
<% end %>

<% if_p('grafana.unified_alerting.screenshots.capture_timeout') do |capture_timeout| %>
# The timeout for capturing screenshots. If a screenshot cannot be captured within the timeout then
# the notification is sent without a screenshot. The maximum duration is 30 seconds. This timeout
# should be less than the minimum Interval of all Evaluation Groups to avoid back pressure on alert
# rule evaluation.
capture_timeout = <%= capture_timeout %>
<% end %>

<% if_p('grafana.unified_alerting.screenshots.max_concurrent_screenshots') do |max_concurrent_screenshots| %>
# The maximum number of screenshots that can be taken at the same time. This option is different from
# concurrent_render_request_limit as max_concurrent_screenshots sets the number of concurrent screenshots
# that can be taken at the same time for all firing alerts where as concurrent_render_request_limit sets
# the total number of concurrent screenshots across all Grafana services.
max_concurrent_screenshots = <%= max_concurrent_screenshots %>
<% end %>

<% if_p('grafana.unified_alerting.screenshots.upload_external_image_storage') do |upload_external_image_storage| %>
# Uploads screenshots to the local Grafana server or remote storage such as Azure, S3 and GCS. Please
# see [external_image_storage] for further configuration options. If this option is false then
# screenshots will be persisted to disk for up to temp_data_lifetime.
upload_external_image_storage = <%= upload_external_image_storage %>
<% end %>

[unified_alerting.reserved_labels]
<% if_p('grafana.unified_alerting.reserved_labels.disabled_labels') do |disabled_labels| %>
# Comma-separated list of reserved labels added by the Grafana Alerting engine that should be disabled.
# For example: `disabled_labels=grafana_folder`
disabled_labels = <%= disabled_labels %>
<% end %>

[unified_alerting.state_history]
<% if_p('grafana.unified_alerting.state_history.enabled') do |enabled| %>
# Enable the state history functionality in Unified Alerting. The previous states of alert rules will be visible in panels and in the UI.
enabled = <%= enabled %>
<% end %>

#################################### Alerting ############################
[alerting]
<% if_p('grafana.alerting.enabled') do |enabled| %>
# Enable the legacy alerting sub-system and interface. If Unified Alerting is already enabled and you try to go back to legacy alerting, all data that is part of Unified Alerting will be deleted. When this configuration section and flag are not defined, the state is defined at runtime. See the documentation for more details.
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.alerting.execute_alerts') do |execute_alerts| %>
# Makes it possible to turn off alert execution but alerting UI is visible
execute_alerts = <%= execute_alerts %>
<% end %>

<% if_p('grafana.alerting.error_or_timeout') do |error_or_timeout| %>
# Default setting for new alert rules. Defaults to categorize error and timeouts as alerting. (alerting, keep_state)
error_or_timeout = <%= error_or_timeout %>
<% end %>

<% if_p('grafana.alerting.nodata_or_nullvalues') do |nodata_or_nullvalues| %>
# Default setting for how Grafana handles nodata or null values in alerting. (alerting, no_data, keep_state, ok)
nodata_or_nullvalues = <%= nodata_or_nullvalues %>
<% end %>

<% if_p('grafana.alerting.concurrent_render_limit') do |concurrent_render_limit| %>
# Alert notifications can include images, but rendering many images at the same time can overload the server
# This limit will protect the server from render overloading and make sure notifications are sent out quickly
concurrent_render_limit = <%= concurrent_render_limit %>
<% end %>

<% if_p('grafana.alerting.evaluation_timeout_seconds') do |evaluation_timeout_seconds| %>
# Default setting for alert calculation timeout. Default value is 30
evaluation_timeout_seconds = <%= evaluation_timeout_seconds %>
<% end %>

<% if_p('grafana.alerting.notification_timeout_seconds') do |notification_timeout_seconds| %>
# Default setting for alert notification timeout. Default value is 30
notification_timeout_seconds = <%= notification_timeout_seconds %>
<% end %>

<% if_p('grafana.alerting.max_attempts') do |max_attempts| %>
# Default setting for max attempts to sending alert notifications. Default value is 3
max_attempts = <%= max_attempts %>
<% end %>

<% if_p('grafana.alerting.min_interval_seconds') do |min_interval_seconds| %>
# Makes it possible to enforce a minimal interval between evaluations, to reduce load on the backend
min_interval_seconds = <%= min_interval_seconds %>
<% end %>

<% if_p('grafana.alerting.max_annotation_age') do |max_annotation_age| %>
# Configures for how long alert annotations are stored. Default is 0, which keeps them forever.
# This setting should be expressed as an duration. Ex 6h (hours), 10d (days), 2w (weeks), 1M (month).
max_annotation_age = <%= max_annotation_age %>
<% end %>

<% if_p('grafana.alerting.max_annotations_to_keep') do |max_annotations_to_keep| %>
# Configures max number of alert annotations that Grafana stores. Default value is 0, which keeps all alert annotations.
max_annotations_to_keep = <%= max_annotations_to_keep %>
<% end %>

#################################### Annotations #########################
[annotations]
<% if_p('grafana.annotations.cleanupjob_batchsize') do |cleanupjob_batchsize| %>
# Configures the batch size for the annotation clean-up job. This setting is used for dashboard, API, and alert annotations.
cleanupjob_batchsize = <%= cleanupjob_batchsize %>
<% end %>

<% if_p('grafana.annotations.tags_length') do |tags_length| %>
# Enforces the maximum allowed length of the tags for any newly introduced annotations. It can be between 500 and 4096 inclusive (which is the respective's column length). Default value is 500.
# Setting it to a higher value would impact performance therefore is not recommended.
tags_length = <%= tags_length %>
<% end %>

[annotations.dashboard]
# Dashboard annotations means that annotations are associated with the dashboard they are created on.

<% if_p('grafana.annotations.dashboard.max_age') do |max_age| %>
# Configures how long dashboard annotations are stored. Default is 0, which keeps them forever.
# This setting should be expressed as a duration. Examples: 6h (hours), 10d (days), 2w (weeks), 1M (month).
max_age = <%= max_age %>
<% end %>

<% if_p('grafana.annotations.dashboard.max_annotations_to_keep') do |max_annotations_to_keep| %>
# Configures max number of dashboard annotations that Grafana stores. Default value is 0, which keeps all dashboard annotations.
max_annotations_to_keep = <%= max_annotations_to_keep %>
<% end %>

[annotations.api]
# API annotations means that the annotations have been created using the API without any
# association with a dashboard.

<% if_p('grafana.annotations.api.max_age') do |max_age| %>
# Configures how long Grafana stores API annotations. Default is 0, which keeps them forever.
# This setting should be expressed as a duration. Examples: 6h (hours), 10d (days), 2w (weeks), 1M (month).
max_age = <%= max_age %>
<% end %>

<% if_p('grafana.annotations.api.max_annotations_to_keep') do |max_annotations_to_keep| %>
# Configures max number of API annotations that Grafana keeps. Default value is 0, which keeps all API annotations.
max_annotations_to_keep = <%= max_annotations_to_keep %>
<% end %>

#################################### Explore #############################
[explore]
<% if_p('grafana.explore.enabled') do |enabled| %>
# Enable the Explore section
enabled = <%= enabled %>
<% end %>

#################################### Help #############################
[help]
<% if_p('grafana.help.enabled') do |enabled| %>
# Enable the Help section
enabled = <%= enabled %>
<% end %>

#################################### Profile #############################
[profile]
<% if_p('grafana.profile.enabled') do |enabled| %>
# Enable the Profile section
enabled = <%= enabled %>
<% end %>

#################################### Query History #############################
[query_history]
<% if_p('grafana.query_history.enabled') do |enabled| %>
# Enable the Query history
enabled = <%= enabled %>
<% end %>

#################################### Internal Grafana Metrics ############
# Metrics available at HTTP URL /metrics and /metrics/plugins/:pluginId
[metrics]
<% if_p('grafana.metrics.enabled') do |enabled| %>
# Disable / Enable internal metrics
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.metrics.interval_seconds') do |interval_seconds| %>
# Publish interval
interval_seconds = <%= interval_seconds %>
<% end %>

<% if_p('grafana.metrics.disable_total_stats') do |disable_total_stats| %>
# Disable total stats (stat_totals_*) metrics to be generated
disable_total_stats = <%= disable_total_stats %>
<% end %>

<% if_p('grafana.metrics.basic_auth.username', 'grafana.metrics.basic_auth.password') do |basic_auth_username, basic_auth_password| %>
# If both are set, basic auth will be required for the metrics endpoint.
basic_auth_username = <%= basic_auth_username %>
basic_auth_password = <%= basic_auth_password %>
<% end %>

# Metrics environment info adds dimensions to the `grafana_environment_info` metric, which
# can expose more information about the Grafana instance.
[metrics.environment_info]
#exampleLabel1 = exampleValue1
#exampleLabel2 = exampleValue2
<% p('grafana.metrics.environment_info', {}).each do |key,value| %>
<%= key %> = <%= value %>
<% end %>

# Send internal Grafana metrics to graphite
[metrics.graphite]
<% if_p('grafana.metrics.graphite.address') do |address| %>
# Enable by setting the address setting (ex localhost:2003)
address = <%= address %>
<% end %>

<% if_p('grafana.metrics.graphite.prefix') do |prefix| %>
prefix = <%= prefix %>
<% end %>

#################################### Grafana.com integration  ##########################
[grafana_net]
<% if_p('grafana.grafana_net.url') do |url| %>
url = <%= url %>
<% end %>

[grafana_com]
<% if_p('grafana.grafana_com.url') do |url| %>
url = <%= url %>
<% end %>

<% if_p('grafana.grafana_com.api_url') do |api_url| %>
api_url = <%= api_url %>
<% end %>

#################################### Distributed tracing ############
# Opentracing is deprecated use opentelemetry instead
[tracing.jaeger]
<% if_p('grafana.tracing.jaeger.address') do |address| %>
# jaeger destination (ex localhost:6831)
address = <%= address %>
<% end %>

<% if_p('grafana.tracing.jaeger.always_included_tag') do |always_included_tag| %>
# tag that will always be included in when creating new spans. ex (tag1:value1,tag2:value2)
always_included_tag = <%= always_included_tag %>
<% end %>

<% if_p('grafana.tracing.jaeger.sampler_type') do |sampler_type| %>
# Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote
sampler_type = <%= sampler_type %>
<% end %>

<% if_p('grafana.tracing.jaeger.sampler_param') do |sampler_param| %>
# jaeger samplerconfig param
# for "const" sampler, 0 or 1 for always false/true respectively
# for "probabilistic" sampler, a probability between 0 and 1
# for "rateLimiting" sampler, the number of spans per second
# for "remote" sampler, param is the same as for "probabilistic"
# and indicates the initial sampling rate before the actual one
# is received from the mothership
sampler_param = <%= sampler_param %>
<% end %>

<% if_p('grafana.tracing.jaeger.sampling_server_url') do |sampling_server_url| %>
# sampling_server_url is the URL of a sampling manager providing a sampling strategy.
sampling_server_url = <%= sampling_server_url %>
<% end %>

<% if_p('grafana.tracing.jaeger.zipkin_propagation') do |zipkin_propagation| %>
# Whether or not to use Zipkin span propagation (x-b3- HTTP headers).
zipkin_propagation = <%= zipkin_propagation %>
<% end %>

<% if_p('grafana.tracing.jaeger.disable_shared_zipkin_spans') do |disable_shared_zipkin_spans| %>
# Setting this to true disables shared RPC spans.
# Not disabling is the most common setting when using Zipkin elsewhere in your infrastructure.
disable_shared_zipkin_spans = <%= disable_shared_zipkin_spans %>
<% end %>

[tracing.opentelemetry]

<% if_p('grafana.tracing.opentelemetry.custom_attributes') do |custom_attributes| %>
# attributes that will always be included in when creating new spans. ex (key1:value1,key2:value2)
custom_attributes = <%= custom_attributes %>
<% end %>

[tracing.opentelemetry.jaeger]
<% if_p('grafana.tracing.opentelemetry.jaeger.address') do |address| %>
# jaeger destination (ex http://localhost:14268/api/traces)
address = <%= address %>
<% end %>

<% if_p('grafana.tracing.opentelemetry.jaeger.propagation') do |propagation| %>
# Propagation specifies the text map propagation format: w3c, jaeger
propagation = <%= propagation %>
<% end %>

# This is a configuration for OTLP exporter with GRPC protocol
[tracing.opentelemetry.otlp]
<% if_p('grafana.tracing.opentelemetry.otlp.address') do |address| %>
# otlp destination (ex localhost:4317)
address = <%= address %>
<% end %>

<% if_p('grafana.tracing.opentelemetry.otlp.propagation') do |propagation| %>
# Propagation specifies the text map propagation format: w3c, jaeger
propagation = <%= propagation %>
<% end %>

#################################### External Image Storage ##############
[external_image_storage]
<% if_p('grafana.external_image_storage.provider') do |provider| %>
# Used for uploading images to public servers so they can be included in slack/email messages.
# You can choose between (s3, webdav, gcs, azure_blob, local)
provider = <%= provider %>
<% end %>

[external_image_storage.s3]
<% if_p('grafana.external_image_storage.s3.endpoint') do |endpoint| %>
endpoint = <%= endpoint %>
<% end %>

<% if_p('grafana.external_image_storage.s3.path_style_access') do |path_style_access| %>
path_style_access = <%= path_style_access %>
<% end %>

<% if_p('grafana.external_image_storage.s3.bucket_url') do |bucket_url| %>
bucket_url = <%= bucket_url %>
<% end %>

<% if_p('grafana.external_image_storage.s3.bucket') do |bucket| %>
bucket = <%= bucket %>
<% end %>

<% if_p('grafana.external_image_storage.s3.region') do |region| %>
region = <%= region %>
<% end %>

<% if_p('grafana.external_image_storage.s3.path') do |path| %>
path = <%= path %>
<% end %>

<% if_p('grafana.external_image_storage.s3.access_key') do |access_key| %>
access_key = <%= access_key %>
<% end %>

<% if_p('grafana.external_image_storage.s3.secret_key') do |secret_key| %>
secret_key = <%= secret_key %>
<% end %>

[external_image_storage.webdav]
<% if_p('grafana.external_image_storage.webdav.url') do |url| %>
url = <%= url %>
<% end %>

<% if_p('grafana.external_image_storage.webdav.username') do |username| %>
username = <%= username %>
<% end %>

<% if_p('grafana.external_image_storage.webdav.password') do |password| %>
password = <%= password %>
<% end %>

<% if_p('grafana.external_image_storage.webdav.public_url') do |public_url| %>
public_url = <%= public_url %>
<% end %>

[external_image_storage.gcs]

<% if_p('grafana.external_image_storage.gcs.json_key') do |key_file| %>
key_file = /var/vcap/jobs/grafana/config/gcs_key.json
<% end %>

<% if_p('grafana.external_image_storage.gcs.bucket') do |bucket| %>
bucket = <%= bucket %>
<% end %>

<% if_p('grafana.external_image_storage.gcs.path') do |path| %>
path = <%= path %>
<% end %>

<% if_p('grafana.external_image_storage.gcs.enable_signed_urls') do |enable_signed_urls| %>
enable_signed_urls = <%= enable_signed_urls %>
<% end %>

<% if_p('grafana.external_image_storage.gcs.signed_url_expiration') do |signed_url_expiration| %>
signed_url_expiration = <%= signed_url_expiration %>
<% end %>

[external_image_storage.azure_blob]
<% if_p('grafana.external_image_storage.azure.account_name') do |account_name| %>
account_name = <%= account_name %>
<% end %>

<% if_p('grafana.external_image_storage.azure.account_key') do |account_key| %>
account_key = <%= account_key %>
<% end %>

<% if_p('grafana.external_image_storage.azure.container_name') do |container_name| %>
container_name = <%= container_name %>
<% end %>

<% if_p('grafana.external_image_storage.azure.sas_token_expiration_days') do |sas_token_expiration_days| %>
sas_token_expiration_days = <%= sas_token_expiration_days %>
<% end %>

[external_image_storage.local]
# does not require any configuration

[rendering]
<% if_p('grafana.rendering.server_url') do |server_url| %>
# Options to configure a remote HTTP image rendering service, e.g. using https://github.com/grafana/grafana-image-renderer.
# URL to a remote HTTP image renderer service, e.g. http://localhost:8081/render, will enable Grafana to render panels and dashboards to PNG-images using HTTP requests to an external service.
server_url = <%= server_url %>
<% end %>

<% if_p('grafana.rendering.callback_url') do |callback_url| %>
# If the remote HTTP image renderer service runs on a different server than the Grafana server you may have to configure this to a URL where Grafana is reachable, e.g. http://grafana.domain/.
callback_url = <%= callback_url %>
<% end %>

<% if_p('grafana.rendering.renderer_token') do |renderer_token| %>
# An auth token that will be sent to and verified by the renderer. The renderer will deny any request without an auth token matching the one configured on the renderer side.
renderer_token = <%= renderer_token %>
<% end %>

<% if_p('grafana.rendering.concurrent_render_request_limit') do |concurrent_render_request_limit| %>
# Concurrent render request limit affects when the /render HTTP endpoint is used. Rendering many images at the same time can overload the server,
# which this setting can help protect against by only allowing a certain amount of concurrent requests.
concurrent_render_request_limit = <%= concurrent_render_request_limit %>
<% end %>

<% if_p('grafana.rendering.render_key_lifetime') do |render_key_lifetime| %>
# Determines the lifetime of the render key used by the image renderer to access and render Grafana.
# This setting should be expressed as a duration. Examples: 10s (seconds), 5m (minutes), 2h (hours).
# Default is 5m. This should be more than enough for most deployments.
# Change the value only if image rendering is failing and you see `Failed to get the render key from cache` in Grafana logs.
render_key_lifetime = <%= render_key_lifetime %>
<% end %>

[panels]
<% if_p('grafana.panels.enable_alpha') do |enable_alpha| %>
# here for to support old env variables, can remove after a few months
enable_alpha = <%= enable_alpha %>
<% end %>

<% if_p('grafana.panels.disable_sanitize_html') do |disable_sanitize_html| %>
disable_sanitize_html = <%= disable_sanitize_html %>
<% end %>

[plugins]
<% if_p('grafana.plugins.enable_alpha') do |enable_alpha| %>
enable_alpha = <%= enable_alpha %>
<% end %>

<% if_p('grafana.plugins.app_tls_skip_verify_insecure') do |app_tls_skip_verify_insecure| %>
app_tls_skip_verify_insecure = <%= app_tls_skip_verify_insecure %>
<% end %>

<% if_p('grafana.plugins.allow_loading_unsigned_plugins') do |allow_loading_unsigned_plugins| %>
# Enter a comma-separated list of plugin identifiers to identify plugins to load even if they are unsigned. Plugins with modified signatures are never loaded.
allow_loading_unsigned_plugins = <%= allow_loading_unsigned_plugins %>
<% end %>

<% if_p('grafana.plugins.plugin_admin_enabled') do |plugin_admin_enabled| %>
# Enable or disable installing / uninstalling / updating plugins directly from within Grafana.
plugin_admin_enabled = <%= plugin_admin_enabled %>
<% end %>

<% if_p('grafana.plugins.plugin_admin_external_manage_enabled') do |plugin_admin_external_manage_enabled| %>
plugin_admin_external_manage_enabled = <%= plugin_admin_external_manage_enabled %>
<% end %>

<% if_p('grafana.plugins.plugin_catalog_url') do |plugin_catalog_url| %>
plugin_catalog_url = <%= plugin_catalog_url %>
<% end %>

<% if_p('grafana.plugins.plugin_catalog_hidden_plugins') do |plugin_catalog_hidden_plugins| %>
# Enter a comma-separated list of plugin identifiers to hide in the plugin catalog.
plugin_catalog_hidden_plugins = <%= plugin_catalog_hidden_plugins %>
<% end %>

#################################### Grafana Live ##########################################
[live]
<% if_p('grafana.live.max_connections') do |max_connections| %>
# max_connections to Grafana Live WebSocket endpoint per Grafana server instance. See Grafana Live docs
# if you are planning to make it higher than default 100 since this can require some OS and infrastructure
# tuning. 0 disables Live, -1 means unlimited connections.
max_connections = <%= max_connections %>
<% end %>

<% if_p('grafana.live.allowed_origins') do |allowed_origins| %>
# allowed_origins is a comma-separated list of origins that can establish connection with Grafana Live.
# If not set then origin will be matched over root_url. Supports wildcard symbol "*".
allowed_origins = <%= allowed_origins %>
<% end %>

<% if_p('grafana.live.ha_engine') do |ha_engine| %>
# engine defines an HA (high availability) engine to use for Grafana Live. By default no engine used - in
# this case Live features work only on a single Grafana server.
# Available options: "redis".
# Setting ha_engine is an EXPERIMENTAL feature.
ha_engine = <%= ha_engine %>
<% end %>

<% if_p('grafana.live.ha_engine_address') do |ha_engine_address| %>
# ha_engine_address sets a connection address for Live HA engine. Depending on engine type address format can differ.
# For now we only support Redis connection address in "host:port" format.
# This option is EXPERIMENTAL.
ha_engine_address = <%= ha_engine_address %>
<% end %>

#################################### Grafana Image Renderer Plugin ##########################
[plugin.grafana-image-renderer]
<% if_p('grafana.plugin.grafana_image_renderer.rendering_timezone') do |rendering_timezone| %>
# Instruct headless browser instance to use a default timezone when not provided by Grafana, e.g. when rendering panel image of alert.
# See ICUâ€™s metaZones.txt (https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt) for a list of supported
# timezone IDs. Fallbacks to TZ environment variable if not set.
rendering_timezone = <%= rendering_timezone %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_language') do |rendering_language| %>
# Instruct headless browser instance to use a default language when not provided by Grafana, e.g. when rendering panel image of alert.
# Please refer to the HTTP header Accept-Language to understand how to format this value, e.g. 'fr-CH, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5'.
rendering_language = <%= rendering_language %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_viewport_device_scale_factor') do |rendering_viewport_device_scale_factor| %>
# Instruct headless browser instance to use a default device scale factor when not provided by Grafana, e.g. when rendering panel image of alert.
# Default is 1. Using a higher value will produce more detailed images (higher DPI), but will require more disk space to store an image.
rendering_viewport_device_scale_factor = <%= rendering_viewport_device_scale_factor %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_ignore_https_errors') do |rendering_ignore_https_errors| %>
# Instruct headless browser instance whether to ignore HTTPS errors during navigation. Per default HTTPS errors are not ignored. Due to
# the security risk it's not recommended to ignore HTTPS errors.
rendering_ignore_https_errors = <%= rendering_ignore_https_errors %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_verbose_logging') do |rendering_verbose_logging| %>
# Instruct headless browser instance whether to capture and log verbose information when rendering an image. Default is false and will
# only capture and log error messages. When enabled, debug messages are captured and logged as well.
# For the verbose information to be included in the Grafana server log you have to adjust the rendering log level to debug, configure
# [log].filter = rendering:debug.
rendering_verbose_logging = <%= rendering_verbose_logging %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_dumpio') do |rendering_dumpio| %>
# Instruct headless browser instance whether to output its debug and error messages into running process of remote rendering service.
# Default is false. This can be useful to enable (true) when troubleshooting.
rendering_dumpio = <%= rendering_dumpio %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_args') do |rendering_args| %>
# Additional arguments to pass to the headless browser instance. Default is --no-sandbox. The list of Chromium flags can be found
# here (https://peter.sh/experiments/chromium-command-line-switches/). Multiple arguments is separated with comma-character.
rendering_args = <%= rendering_args %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_chrome_bin') do |rendering_chrome_bin| %>
# You can configure the plugin to use a different browser binary instead of the pre-packaged version of Chromium.
# Please note that this is not recommended, since you may encounter problems if the installed version of Chrome/Chromium is not
# compatible with the plugin.
rendering_chrome_bin = <%= rendering_chrome_bin %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_mode') do |rendering_mode| %>
# Instruct how headless browser instances are created. Default is 'default' and will create a new browser instance on each request.
# Mode 'clustered' will make sure that only a maximum of browsers/incognito pages can execute concurrently.
# Mode 'reusable' will have one browser instance and will create a new incognito page on each request.
rendering_mode = <%= rendering_mode %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_clustering_mode') do |rendering_clustering_mode| %>
# When rendering_mode = clustered, you can instruct how many browsers or incognito pages can execute concurrently. Default is 'browser'
# and will cluster using browser instances.
# Mode 'context' will cluster using incognito pages.
rendering_clustering_mode = <%= rendering_clustering_mode %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_clustering_max_concurrency') do |rendering_clustering_max_concurrency| %>
# When rendering_mode = clustered, you can define the maximum number of browser instances/incognito pages that can execute concurrently. Default is '5'.
rendering_clustering_max_concurrency = <%= rendering_clustering_max_concurrency %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_clustering_timeout') do |rendering_clustering_timeout| %>
# When rendering_mode = clustered, you can specify the duration a rendering request can take before it will time out. Default is `30` seconds.
rendering_clustering_timeout = <%= rendering_clustering_timeout %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_viewport_max_width') do |rendering_viewport_max_width| %>
# Limit the maximum viewport width, height and device scale factor that can be requested.
rendering_viewport_max_width = <%= rendering_viewport_max_width %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_viewport_max_height') do |rendering_viewport_max_height| %>
# Limit the maximum viewport height that can be requested.
rendering_viewport_max_height = <%= rendering_viewport_max_height %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.rendering_viewport_max_device_scale_factor') do |rendering_viewport_max_device_scale_factor| %>
# Limit the maximum viewport device scale factor that can be requested.
rendering_viewport_max_device_scale_factor = <%= rendering_viewport_max_device_scale_factor %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.grpc_host') do |grpc_host| %>
# Change the listening host and port of the gRPC server. Default host is 127.0.0.1 and default port is 0 and will automatically assign
# a port not in use.
grpc_host = <%= grpc_host %>
<% end %>

<% if_p('grafana.plugin.grafana_image_renderer.grpc_port') do |grpc_port| %>
# Change the listening port of the gRPC server. Default  default port is 0 and will automatically assign a port not in use.
grpc_port = <%= grpc_port %>
<% end %>

[enterprise]
<% if_p('grafana.enterprise.license') do %>
license_path = /var/vcap/jobs/grafana/config/license.jwt
<% end %>

[feature_toggles]
# there are currently two ways to enable feature toggles in the `grafana.ini`.
# you can either pass an array of feature you want to enable to the `enable` field or
# configure each toggle by setting the name of the toggle to true/false. Toggles set to true/false
# will take precedence over toggles in the `enable` list.

<% if_p('grafana.feature_toggles.enable') do |enable| %>
# enable = feature1,feature2
enable = <%= enable %>
<% end %>

# Some features are enabled by default, see:
# https://grafana.com/docs/grafana/next/setup-grafana/configure-grafana/feature-toggles/
# To enable features by default, set `Expression:  "true"` in:
# https://github.com/grafana/grafana/blob/main/pkg/services/featuremgmt/registry.go

# feature1 = true
# feature2 = false
[date_formats]
# For information on what formatting patterns that are supported https://momentjs.com/docs/#/displaying/

<% if_p('grafana.date_formats.full_date') do |full_date| %>
# Default system date format used in time range picker and other places where full time is displayed
full_date = <%= full_date %>
<% end %>

<% if_p('grafana.date_formats.interval_second') do |interval_second| %>
# Used by graph and other places where we only show small intervals
interval_second = <%= interval_second %>
<% end %>

<% if_p('grafana.date_formats.interval_minute') do |interval_minute| %>
interval_minute = <%= interval_minute %>
<% end %>

<% if_p('grafana.date_formats.interval_hour') do |interval_hour| %>
interval_hour = <%= interval_hour %>
<% end %>

<% if_p('grafana.date_formats.interval_day') do |interval_day| %>
interval_day = <%= interval_day %>
<% end %>

<% if_p('grafana.date_formats.interval_month') do |interval_month| %>
interval_month = <%= interval_month %>
<% end %>

<% if_p('grafana.date_formats.interval_year') do |interval_year| %>
interval_year = <%= interval_year %>
<% end %>

<% if_p('grafana.date_formats.use_browser_locale') do |use_browser_locale| %>
# Experimental feature
use_browser_locale = <%= use_browser_locale %>
<% end %>

<% if_p('grafana.date_formats.default_timezone') do |default_timezone| %>
# Default timezone for user preferences. Options are 'browser' for the browser local timezone or a timezone name from IANA Time Zone database, e.g. 'UTC' or 'Europe/Amsterdam' etc.
default_timezone = <%= default_timezone %>
<% end %>

[expressions]
<% if_p('grafana.expressions.enabled') do |enabled| %>
# Enable or disable the expressions functionality.
enabled = <%= enabled %>
<% end %>

[geomap]
<% if_p('grafana.geomap.default_baselayer_config') do |default_baselayer_config| %>
# Set the JSON configuration for the default basemap
default_baselayer_config = <%= default_baselayer_config %>
<% end %>

<% if_p('grafana.geomap.enable_custom_baselayers') do |enable_custom_baselayers| %>
# Enable or disable loading other base map layers
enable_custom_baselayers = <%= enable_custom_baselayers %>
<% end %>

#################################### Dashboard previews #####################################

[dashboard_previews.crawler]
<% if_p('grafana.dashboard_previews.crawler.thread_count') do |thread_count| %>
# Number of dashboards rendered in parallel. Default is 6.
thread_count = <%= thread_count %>
<% end %>

<% if_p('grafana.dashboard_previews.crawler.rendering_timeout') do |rendering_timeout| %>
# Timeout passed down to the Image Renderer plugin. It is used in two separate places within a single rendering request:
# First during the initial navigation to the dashboard and then when waiting for all the panels to load. Default is 20s.
# This setting should be expressed as a duration. Examples: 10s (seconds), 1m (minutes).
rendering_timeout = <%= rendering_timeout %>
<% end %>

<% if_p('grafana.dashboard_previews.crawler.max_crawl_duration') do |max_crawl_duration| %>
# Maximum duration of a single crawl. Default is 1h.
# This setting should be expressed as a duration. Examples: 10s (seconds), 1m (minutes).
max_crawl_duration = <%= max_crawl_duration %>
<% end %>

<% if_p('grafana.dashboard_previews.crawler.scheduler_interval') do |scheduler_interval| %>
# Minimum interval between two subsequent scheduler runs. Default is 12h.
# This setting should be expressed as a duration. Examples: 10s (seconds), 1m (minutes).
scheduler_interval = <%= scheduler_interval %>
<% end %>

#################################### Support Bundles #####################################
[support_bundles]
<% if_p('grafana.support_bundles.enabled') do |enabled| %>
# Enable support bundle creation (default: true)
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.support_bundles.server_admin_only') do |server_admin_only| %>
# Only server admins can generate and view support bundles (default: true)
server_admin_only = <%= server_admin_only %>
<% end %>

<% if_p('grafana.support_bundles.public_keys') do |public_keys| %>
# If set, bundles will be encrypted with the provided public keys separated by whitespace
 public_keys = <%= public_keys %>
<% end %>

#################################### Storage ################################################

[storage]
<% if_p('grafana.storage.allow_unsanitized_svg_upload') do |allow_unsanitized_svg_upload| %>
# Allow uploading SVG files without sanitization.
allow_unsanitized_svg_upload = <%= allow_unsanitized_svg_upload %>
<% end %>

#################################### Search ################################################

[search]
<% if_p('grafana.search.dashboard_loading_batch_size') do |dashboard_loading_batch_size| %>
# Defines the number of dashboards loaded at once in a batch during a full reindex.
# This is a temporary settings that might be removed in the future.
dashboard_loading_batch_size = <%= dashboard_loading_batch_size %>
<% end %>

<% if_p('grafana.search.full_reindex_interval') do |full_reindex_interval| %>
# Defines the frequency of a full search reindex.
# This is a temporary settings that might be removed in the future.
full_reindex_interval = <%= full_reindex_interval %>
<% end %>

<% if_p('grafana.search.index_update_interval') do |index_update_interval| %>
# Defines the frequency of partial index updates based on recent changes such as dashboard updates.
# This is a temporary settings that might be removed in the future.
index_update_interval = <%= index_update_interval %>
<% end %>

# Move an app plugin referenced by its id (including all its pages) to a specific navigation section
# Dependencies: needs the `topnav` feature to be enabled
# Format: <Plugin ID> = <Section ID> <Sort Weight>
[navigation.app_sections]

# Move a specific app plugin page (referenced by its `path` field) to a specific navigation section
# Format: <Page URL> = <Section ID> <Sort Weight>
[navigation.app_standalone_pages]

#################################### Secure Socks5 Datasource Proxy #####################################
[secure_socks_datasource_proxy]
<% if_p('grafana.secure_socks_datasource_proxy.enabled') do |enabled| %>
enabled = <%= enabled %>
<% end %>

<% if_p('grafana.secure_socks_datasource_proxy.root_ca_cert') do |root_ca_cert| %>
root_ca_cert = <%= root_ca_cert %>
<% end %>

<% if_p('grafana.secure_socks_datasource_proxy.client_key') do |client_key| %>
client_key = <%= client_key %>
<% end %>

<% if_p('grafana.secure_socks_datasource_proxy.client_cert') do |client_cert| %>
client_cert = <%= client_cert %>
<% end %>

<% if_p('grafana.secure_socks_datasource_proxy.server_name') do |server_name| %>
server_name = <%= server_name %>
<% end %>

<% if_p('grafana.secure_socks_datasource_proxy.proxy_address') do |proxy_address| %>
# The address of the socks5 proxy datasources should connect to
proxy_address = <%= proxy_address %>
<% end %>
